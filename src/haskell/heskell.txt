スナイパードメインのHaskellによる実装		A:\PJ\sniper\src\haskell\heskell.txt

オブジェクト指向的な言語の戦略は、SniperオブジェクトをTranslatorオブジェクトの生成時に渡す事で、
Translatorのメッセージ解釈の副作用として、内部からSniperオブジェクトのメソッドを呼び出す。
必然的に、メソッドの大半がVoid型で、クラスグローバル変数を参照変更しながら副作用で問題を解決する。

Haskellでは、違った戦略が必要だ。なにしろ、副作用を扱うのはモナドの知識が必要だし、自分はまだよく分かっていない。
なので、副作用を持たない戦略が必要だ。なので、副作用を監視するモックは必要ない事になる。

テストはHUnitを使う。日本語のテスト関数は今のところ出来ないのであきらめる。
Haskellで思う事は関数の演算子化が激しい、始め自分はJavaScriptのjQueryの$記号にも軽いアレルギー反応が有ったけど、
Haskellと付き合う内に、だんだんと慣れて来た。





スナイパーファイナル　　			A:\PJ\sniper\Sniper.txt
実装中に気付いた事　　			A:\PJ\sniper\hint.txt
今回の最終形				 	A:\PJ\mamo2\langs\groovy\prjs\books\ant
現在の作業フォルダ　			A:\PJ\sniper
スナイパードメインのJavaScriptによる実装		A:\PJ\sniper\src\js\js.txt
スナイパードメインのPythonによる実装			A:\PJ\sniper\src\python\python.txt
スナイパードメインのRubyによる実装			A:\PJ\sniper\src\ruby\ruby.txt
スナイパードメインのHaskellによる実装		A:\PJ\sniper\src\haskell\heskell.txt
